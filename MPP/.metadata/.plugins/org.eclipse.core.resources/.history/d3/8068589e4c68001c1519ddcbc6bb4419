package com.spring.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.spring.entity.User;
import com.spring.exception.ResourceNotFoundException;
import com.spring.repository.UserRepository;

@RestController
//@RequestMapping("/api/users")
public class UserController {
	
	@Autowired
	private UserRepository userRepository;
	
	//@GetMapping("/")
	@RequestMapping("/")
	public String loadIndex() {
		return  "index";
	}
	
	// getAllUser
	@GetMapping
	public List<User> getAllUser(){
		return this.userRepository.findAll();
	}
	
	
	//getUserById
	@GetMapping("/{id}")
	public User getUserById(@PathVariable(value = "id") long userId) {
		//return this.userRepository.findById(userId).get();
		return this.userRepository.findById(userId).orElseThrow(()->new ResourceNotFoundException("Resource not found"));
	}
	
	
	@PostMapping
	public User saveUser(@RequestBody User user) {
		return this.userRepository.save(user);
	}
	
	@PutMapping("/{id}")
	public User updateUser(@RequestBody User user,@PathVariable(value ="id") long userId) {
		User existingUser=this.userRepository.findById(userId).orElseThrow(()->new ResourceNotFoundException("Resource not found"));
		existingUser.setFirstName(user.getFirstName());
		existingUser.setLastName(user.getLastName());
		existingUser.setEmail(user.getEmail());
		return this.userRepository.save(existingUser);
		
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<User> deleteUser(@PathVariable(value = "id") long userId){
		User existingUser=this.userRepository.findById(userId).orElseThrow(()->new ResourceNotFoundException("Resource not found"));
		this.userRepository.delete(existingUser);
		return ResponseEntity.ok().build();
	}
}
